import json
import locale
import sys

import emails
import reports
import os


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


beta = load_data("sales.json")



def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


#for i in beta :
    #print((format_car(i['car'])))


def process_data(data):
    """Analyzes the data, looking for maximums.
    Returns a list of lines that summarize the information.
    """
    locale.setlocale(locale.LC_ALL, "en_US.UTF8")
    max_revenue = {"revenue": 0}
    max_sales = {"total_sales": 0}
    car_years = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue=item['total_sales']*item_price
        if item_revenue> max_revenue['revenue']:
            max_revenue['revenue']=item_revenue
        
        item["revenue"] = item_revenue
        max_revenue = item
        
       
        if item['total_sales'] > max_sales['total_sales']:
            max_sales =item
        year = item["car"]["car_year"]
        if year not in car_years:
            car_years[year] = item["total_sales"]
        else:
            car_years[year] += item["total_sales"]
    

    popular_year_count, popular_year = max(zip(car_years.values(), car_years.keys()))
  
    summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["total_sales"]),
    "The most popular year was {} with {} sales".format(popular_year, popular_year_count)]
    return summary


#print(process_data(beta))

def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data





def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("sales.json")
  #Sort the data by total sales
  sorted_data = sorted(data, key = lambda i: i['total_sales'], reverse=True)  # sort by total sales, descending
  summary = process_data(data)
  #turn this into a PDF report
  table_data = cars_dict_to_table(data)
  text_summary = '\n'.join(summary)
  print(text_summary)
  reports.generate("/tmp/cars.pdf", "A Complete Summary of Monthly Car Sales", text_summary, table_data)
  #send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = '\n'.join(summary)

  message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")  # creates email
  emails.send(message)
  




if __name__ == "__main__":
  main(sys.argv)
